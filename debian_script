#!/bin/bash

initial_downloads_and_redownloads(){
  # Ensure the script is run as root
  #$EUID is getting the effective user ID of the current user running the script
  # -ne is not equlas
  # 0 is the user ID of root
  if [ "$EUID" -ne 0 ]; then
    echo "Please run as root"
    exit
  fi

  # Update and upgrade the system
  echo "Updating and upgrading the system..."
  apt-get update && apt-get upgrade -y

  #ND-- what other packages do we want??
  # Install important tools 
  echo "Installing important packages..."
  apt-get install -y vim #add more packages needed and wanted

  #ND-- is that list complete and correct??
  # Reinstall essential system binaries
  # This ensures that any malicious binaries are replaced with clean versions from trusted sources
  echo "Reinstalling essential system binaries to ensure integrity..."

  essential_packages=( # List of essential packages to reinstall (can be customized based on competition needs)

    "coreutils"         # Basic file, shell, and text manipulation utilities
    "bash"              # The Bourne Again Shell
    "sudo"              # Allows users to run commands as root
    "openssl"           # Cryptographic toolkit
    "openssh-server"    # SSH server for remote access
    "gnupg"             # GnuPG for signing and encryption
    "util-linux"        # System utilities (fdisk, mount, etc.)
    "procps"            # Utilities related to processes (ps, top, etc.)
    "net-tools"         # Network tools (ifconfig, netstat, etc.)
    "iptables"          # Firewall management tool
    "passwd"            # Password management utility

  )

  for package in "${essential_packages[@]}"; do
    echo "Reinstalling $package and its dependencies..."
    # Reinstall the package 
    apt-get install --reinstall -y "$package"

  done

  echo "Reinstallation of essential system binaries complete."


  # install webin, a convineint GUI for iptables and other things, this is for use during the comp not for initial hardening
  curl -o webmin-setup-repos.sh https://raw.githubusercontent.com/webmin/webmin/master/webmin-setup-repos.sh # Downloads the Webmin repo and saves it to a file 
  sh webmin-setup-repos.sh # Adds the repo to your system's package manager configuration.
  apt-get install webmin --install-recommends #install webmin
}

# Function to change user password
change_initial_password(){
  # Prompt for the username
  read -p "Enter the username for which you want to change the password: " USER_NAME

  # Check if the user exists
  if id "$USER_NAME" &>/dev/null; then
    while true; do
      # Prompt for the new password
      read -s -p "Enter the new password for $USER_NAME: " NEW_PASSWORD
      echo
      read -s -p "Confirm the new password: " CONFIRM_PASSWORD
      echo
      
      # Check if the passwords match
      if [ "$NEW_PASSWORD" != "$CONFIRM_PASSWORD" ]; then
        echo "Passwords do not match. Please try again."
      else
        # Change the password using chpasswd
        echo "$USER_NAME:$NEW_PASSWORD" | chpasswd
        echo "Password for user $USER_NAME has been successfully changed."
        break
      fi
    done
  else
    echo "User $USER_NAME does not exist."
    exit 1
  fi
}


#call functions
initial_downloads_and_redownloads
change_initial_password
